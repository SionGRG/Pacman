/*	

	***** TASK DESCRIPTION ******


	We would like you to spend some time to finish this Pac-Man game and make the necessary changes and refactors to make the game work. The code is completely undocumented and is purposefully written to be horrible code, is meant as a test, and it is in no way representative of production code.

	What fixes or improvements you make is up to you, but you will need to explain and justify your choices. You are allowed to make any changes you want to the code as long as the game is still written in C++ and uses SDL. You do not need to implement more than one level and all art is supplied.

	We supply a solution file for Visual Studio 2015, but feel free to convert it to another version if that is more practical for you. The folder "\Pacman\data" should be set as the working directory for the project.

	Along with the code, we ask that you provide a document listing the changes you made, the reasons for making them, and what other changes/improvements you would make if you had more time. You can submit your work by uploading a ZIP of your changes via this website.

	The code you should work with can be downloaded here.

	PLEASE REMEMBER TO UPLOAD YOU FINAL COMPLETED ZIP FILE TO THE “CHOOSE FILE” BUTTON AT THE BOTTOM LEFT OF THIS PAGE BEFORE HITTING “SUBMIT ANSWER”


	Good luck!

	A free version of Visual Studio can be downloaded at:
	https://www.visualstudio.com/downloads
	You can find more information about Pac-Man here:
	http://en.wikipedia.org/wiki/Pac-Man
	http://www.webpacman.com

*/




	/*  ################### PROJECT PLAN ################### */

Main Goals:
✓	- Create a texture class for loading textures
✓	- create a sprite class
✓	- create a Renderer that renders all the game objects
✓	- create a spritesheets atlas to speed up load times
	- improving memory management and fix memory leaks
	- fix the memory leak problem that causes the game to crash after some time
	- fix the framerate, and get the game to a playable state
	- fix the collision detection, especially after the player dies


Stretch Goals:
	- sprite animation
	- make spritesheets for animation
	- make a texture atlas of all the textures to save on loading
	- improve the enemy AI movement
	- add more enemies to the level
	- add more levels (possibly)
	- add audio and audio effects
	- speed the engine and game with multi-threading both loading and gameplay




/*	===============	TIMELINE DOCUMENTATION ===================	*/

=> TOTAL TIME TAKEN: -- Hrs -- Min


Day 1: 12th February 2023
	
	-> Brief: Initial Project set up and ensure that the code compiles 

	* Task 1: Getting the project and Repository setup
		- Details: downloaded the Pacman project from the website and created a private repository for it on GitHub to document the various changes on the project.
		- ETA: 6 min

	* Task 2: Initial Edits and Project setup
		- Details: Set up the project to work with visual studio 2022, created a Timeline tracking file and browsed the files in the project.
		- ETA: 30 min

	* Task 3: Fixing Errors and Making sure the project compiles and runs
		- Details: Fixed the errors with include files for the libs, the games was was not compiling in x64 so I switched to Win32 (x86) to fix the problem with the linker not finding the main entry point. The game now compiles and runs, however, it's "VERY SLOWW!!".
		- ETA: 35 min

	* Task 4: Improving the Vector2f Class of Math Library 
		- Details: Move the class methods definitions to the cpp files and left the declarations in the header file, inspected the project to look for similar structure that needed to change
		- ETA: 50 min


Day 2: 13th February 2023

	-> Brief: Understanding the game code and making a plan for what needs to improve and what to add if there is time

	* Task 5: Create a game class and free up the main entry point 
		- Details: created a game class to separate the game initialisation and the game loop while freeing up the main entry point
		- ETA: 1 hrs 30 min

	* Task 6: Create a basic Event system
		- Details: added more tasks to do, created a basic Event system, closing the window now closes the game.
		- ETA: 10 min


Day 3: 15th February 2023
	
	-> Brief: Building the building blocks of the engine

	* Task 7: Texture abstraction 
		- Details: created aTexture Class to abstract the creation of an SDL texture
		- ETA: 1 hrs 10 min
		
	* Task 8: Limit the Frame rate
		- Details: limited the Game's FPS to 60 frames per second
		- ETA: 20 min
		

Day 4: 16th February 2023

	-> Brief: Engine Architecture Overhaul Part 1

	* Task 9: Engine Architecture Overhaul Part 1
		- Details: built the building block of my custom game engine, this includes a TextureCache class, A game Obejct class, a Sprite Class and a Renderer that abstract the SDL_Renderer. This will allow me to do sprite animations, load sprite atlas to save on loading.
		- ETA: 4 hrs 00 min
		

Day 5: 17th February 2023

	* Task 10: Created a Spritesheet Atlas 
		- Details: Created a spritesheet atlas for all the textures of the games. This will help to speed up load times as the assets will be loaded in at once
		- ETA: 20 min
		
				
Day 6: 18th February 2023
				
	-> Brief: Engine Architecture Overhaul Part 2

	* Task 11: Engine Architecture Overhaul Part 2
		- Details: Created a file Loader that contains methods of reading many kinds of files and loading many kinds of data. Created a Resource cache that stores the assets used in a the game, which includes the Textures, text data like JSON data, Sprite Data, (in the future) Audio Data, etc. Added a C++ JSON Parser library.
		- ETA: 3 hrs 00 min
		
	* Task 12: Optimising String Memory Usage and moved to C++17  
		- Details: Moved to using C++ 17. Optimised the string memory allocations by using std::string_view from C++17.

		- ETA: 20 min
		
		
	* Task X: 
		- Details: 
		- ETA: -- hrs -- min
		
